import java_cup.runtime.*;
import leafs.*;
import nodes.*;
import java.util.*;
import Visitor.*;

//Terminali
terminal MAIN,END,SEMI,VAR,INTEGER,BOOL,REAL,STRING,COMMA,ASSIGN,RPAR,LPAR,FUN,COLON,
         ELSE,WHILE,LOOP,READ,WRITELN,WRITET,WRITEB,WRITE,PLUS,MINUS,TIMES,DIV,DIVINT,
         AND,POW,STR_CONCAT,OR,GT,GE,LT,LE,EQ,NE,NOT,IF,THEN,RETURN,OUTPAR,OUT;
//terminal Boolean TRUE, FALSE;
terminal Integer INTEGER_CONST;
terminal Boolean BOOL_CONST;
//terminal Float REAL_CONST;//Problem
terminal String STRING_CONST, ID, REAL_CONST;

terminal _uminus;

//Non terminali
nonterminal Program,VarDeclList,FunList,Main,VarDecl,StatList,Fun,IdListInit,IdListInitObbl,
            Type,Expr,Const,ParDecl,Stat,IfStat,WhileStat,ReadStat,IdList,ExprList,
            WriteStat,AssignStat,CallFun,Else,ParamDeclList,NonEmptyParamDeclList,ReturnStat;

//Precedenze
precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc EQ,NE,LT,LE,GT,GE;
precedence left STR_CONCAT;
precedence left PLUS,MINUS;
precedence left TIMES,DIV,DIVINT;
precedence right POW;
precedence left LPAR,RPAR;
precedence left _uminus;


Program ::= VarDeclList:varDeclList FunList:funList Main:main {:RESULT= new ProgramNode("ProgramOp",(ArrayList<VarDeclNode>)varDeclList,(ArrayList<FunNode>)funList, (BodyNode) main);:}
;
VarDeclList ::= /* empty */ {:RESULT= new  ArrayList<VarDeclNode>();:}
	| VarDecl:varDecl VarDeclList:varDeclList {: ((ArrayList<VarDeclNode>) varDeclList).add(0,(VarDeclNode) varDecl); RESULT = varDeclList; :}
;
Main ::= MAIN VarDeclList:vardeclist StatList:statlist END MAIN SEMI {: RESULT = new BodyNode("BodyOp",(ArrayList<VarDeclNode>)vardeclist,(StatListNode) statlist); :}
;
FunList ::= /* empty */ {:RESULT = new ArrayList<FunNode>(); :}
	| Fun:fun FunList:funList {:((ArrayList<FunNode>)funList).add(0,(FunNode) fun); RESULT = funList; :}
;
VarDecl ::= Type:type IdListInit:idlistinit SEMI {:RESULT = new VarDeclNode("VarDeclOp",(TypeNode) type, (ArrayList<IdInitNode>) idlistinit);:}
	| VAR IdListInitObbl:idlistinitobbl SEMI {:RESULT = new VarDeclNode("VarDeclOp", new TypeNode("VarOp","VAR"), (ArrayList<IdInitNode>) idlistinitobbl); :}
;
Type ::= INTEGER {: RESULT = new TypeNode("IntOp", "INTEGER"); :}
         | BOOL {: RESULT = new TypeNode("BoolOp", "BOOL"); :}
         | REAL {: RESULT = new TypeNode("RealOp", "REAL"); :}
         | STRING {: RESULT = new TypeNode("StringOp", "STRING"); :}
;
//?
IdListInit ::= ID:id {: ArrayList<IdInitNode> l = new ArrayList<IdInitNode>(); l.add(new IdInitNode(new LeafID(id))); RESULT = l; :}
	| IdListInit:idlistinit COMMA ID:id {: ((ArrayList<IdInitNode>)idlistinit).add(new IdInitNode(new LeafID(id))); RESULT = idlistinit; :}
	| ID:id ASSIGN Expr:expr {: ArrayList<IdInitNode> l = new ArrayList<IdInitNode>(); l.add(new IdInitNode(new LeafID(id), (ExprNode) expr)); RESULT = l; :}
	| IdListInit:idlistinit COMMA ID:id ASSIGN Expr:expr {: ((ArrayList<IdInitNode>) idlistinit).add(new IdInitNode(new LeafID(id), (ExprNode) expr)); RESULT = idlistinit; :}
;
IdListInitObbl ::= ID:id ASSIGN Const:c {: ArrayList<IdInitNode> l = new ArrayList<IdInitNode>(); l.add(new IdInitNode(new LeafID(id), (ConstNode) c)); RESULT = l; :}
	| IdListInitObbl:idlistinitobbl COMMA ID:id ASSIGN Const:c {: ((ArrayList<IdInitNode>) idlistinitobbl).add(new IdInitNode(new LeafID(id), (ConstNode) c)); RESULT = idlistinitobbl; :}
;
Const ::= INTEGER_CONST:val {:RESULT = new ConstNode("INTEGER_CONST", new LeafIntegerConst(val)); :}
          | REAL_CONST:val {:RESULT = new ConstNode("REAL_CONST", new LeafRealConst(val)); :}
          | BOOL_CONST:val {:RESULT = new ConstNode("BOOL_CONST", new LeafBool(val)); :}
          | STRING_CONST:val {:RESULT = new ConstNode("STRING_CONST", new LeafStringConst(val)); :}
;
/*
Bool_Const ::= TRUE:val {:RESULT = new Bool_ConstNode("TRUE", new LeafBool(val)); :}
               | FALSE:val {:RESULT = new Bool_ConstNode("FALSE", new LeafBool(val)); :}
;
*/
Fun ::= FUN ID:id LPAR ParamDeclList:pardecllist RPAR COLON Type:type
		VarDeclList:vardeclist StatList:statlist END FUN SEMI {: BodyNode b = new BodyNode("BodyOp",(ArrayList<VarDeclNode>)vardeclist,(StatListNode) statlist);
		                                                        LeafID leafId = new LeafID(id);
                                                               RESULT = new FunNode("FunOp", leafId, (ArrayList<ParDeclNode>)pardecllist, (TypeNode) type, b); :}
	| FUN ID:id LPAR ParamDeclList:pardecllist RPAR
		VarDeclList:vardeclist StatList:statlist END FUN SEMI {:BodyNode b = new BodyNode("BodyOp",(ArrayList<VarDeclNode>)vardeclist,(StatListNode) statlist);
		                                                        LeafID leafId = new LeafID(id);
                                                              	RESULT = new FunNode("FunOp", new LeafID(id),(ArrayList<ParDeclNode>)pardecllist,b); :}
;
ParamDeclList ::= /*empty */ {: RESULT = new ArrayList<ParDeclNode>(); :}
	| NonEmptyParamDeclList:notemptyparam {: RESULT = notemptyparam; :}
;
NonEmptyParamDeclList ::= ParDecl:pardecl {: ArrayList<ParDeclNode> l = new ArrayList<ParDeclNode>(); l.add((ParDeclNode) pardecl); RESULT = l; :}
	| NonEmptyParamDeclList:nepDeclist COMMA ParDecl:pardecl {: ((ArrayList<ParDeclNode>) nepDeclist).add((ParDeclNode) pardecl); RESULT = nepDeclist; :}//?
;
ParDecl ::= Type:type ID:id {:RESULT = new ParDeclNode("ParDeclOp", new ModeParNode("in"),(TypeNode) type, new LeafID(id)); :}
	| OUT Type:type ID:id {:RESULT = new ParDeclNode("ParDeclOp",new ModeParNode("out"),(TypeNode) type, new LeafID(id)); :}
;
StatList ::= /* empty */ {: ArrayList<StatNode> tmp_list = new ArrayList<StatNode>(); RESULT = new StatListNode("StatList", tmp_list); :}//
	 | Stat:stat StatList:statlist {: ((StatListNode) statlist).add((StatNode)stat); RESULT = statlist; :}//
;
Stat ::= IfStat:ifstat SEMI {: RESULT = (StatNode) ifstat; :}
	| WhileStat:whilestat SEMI {: RESULT = (StatNode) whilestat; :}
	| ReadStat:readstat SEMI {: RESULT = (StatNode) readstat; :}
	| WriteStat:writestat SEMI {: RESULT = (StatNode) writestat; :}
	| AssignStat:assignstat SEMI {: RESULT = (StatNode) assignstat; :}
	| CallFun:callfunstat SEMI {: RESULT = (StatNode) callfunstat; :}
	| ReturnStat:returnstat SEMI {: RESULT = (StatNode) returnstat; :}
;

ReturnStat ::= RETURN Expr:expr {: RESULT = new ReturnStatNode("ReturnOp", (ExprNode) expr); :} ;

IfStat ::= IF Expr:expr THEN VarDeclList:varDeclist StatList:statlist Else:elseb END IF {:
BodyNode bn = new BodyNode("BodyOp",(ArrayList<VarDeclNode>)varDeclist,(StatListNode) statlist);
if(elseb!=null){
RESULT = new IfStatNode("IfOp", (ExprNode) expr, bn , (BodyNode) elseb);}
  else{
  RESULT = new IfStatNode("IfOp", (ExprNode) expr, bn);} :}
;
Else ::= /* empty */ {: RESULT = null;:}
	| ELSE VarDeclList:vardeclist  StatList:statlist {: BodyNode bodynode = new BodyNode("BodyOp", (ArrayList<VarDeclNode>)vardeclist,(StatListNode) statlist); RESULT = bodynode; :}//
;
WhileStat ::= WHILE Expr:expr LOOP VarDeclList:varDeclList  StatList:statList END LOOP {:
 BodyNode n = new BodyNode("BodyOp", (ArrayList<VarDeclNode>)varDeclList,(StatListNode) statList); RESULT = new WhileStatNode("WhileOp",(ExprNode) expr, n); :}//
;
ReadStat ::= READ IdList:idlist Expr:expr {: RESULT = new ReadStatNode("ReadOp", (ArrayList<LeafID>)idlist, (ExprNode) expr); :}
	| READ IdList:idlist {: RESULT = new ReadStatNode("ReadOp", (ArrayList<LeafID>)idlist); :}
;
IdList ::= ID:id {: ArrayList<LeafID> l = new ArrayList<LeafID>(); l.add(new LeafID(id)); RESULT= l; :}
	| IdList:idlist COMMA ID:id {: ((ArrayList)idlist).add(new LeafID(id)); RESULT = idlist;  :}//?
;
WriteStat ::=  WRITE  Expr:expr {: RESULT = new WriteStatNode("WriteOp",new ModeWriteNode("write"),(ExprNode) expr);:}
	| WRITELN  Expr:expr {: RESULT = new WriteStatNode("WriteOp",new ModeWriteNode("writeln"),(ExprNode) expr); :}
	| WRITET  Expr:expr {: RESULT = new WriteStatNode("WriteOp",new ModeWriteNode("writet"),(ExprNode) expr); :}
	| WRITEB  Expr:expr {: RESULT = new WriteStatNode("WriteOp",new ModeWriteNode("writeb"),(ExprNode) expr); :}
;

AssignStat ::=  ID:id ASSIGN Expr:expr {: RESULT = new AssignStatNode("AssignOp", new LeafID(id), (ExprNode) expr); :}
;
CallFun ::= ID:id LPAR ExprList:exprlist RPAR {: RESULT = new CallFunNode("CallFunOp", new LeafID(id), (ArrayList<ExprNode>) exprlist); :}
	| ID:id LPAR RPAR {: RESULT = new CallFunNode("CallFunOp", new LeafID(id)); :}
;

ExprList ::= Expr:expr {: ArrayList<ExprNode> l = new ArrayList<ExprNode>(); l.add(0,(ExprNode) expr); RESULT = l; :}
	| Expr:expr COMMA ExprList:exprList {:((ArrayList<ExprNode>) exprList).add(0,(ExprNode) expr); RESULT = exprList; :}
	| OUTPAR ID:id {: ExprNode e = new ExprNode("OutPar",new ModeParNode("out"), new LeafID(id)); ArrayList<ExprNode> l_temp= new ArrayList<ExprNode>(); l_temp.add((ExprNode) e); RESULT = l_temp; :}//?
	| OUTPAR ID:id COMMA ExprList:exprlist {:  ExprNode e = new ExprNode("OutPar",new ModeParNode("out"),new LeafID(id)); ((ArrayList<ExprNode>)exprlist).add(0,(ExprNode) e); RESULT = exprlist; :}//?
;

Expr ::= BOOL_CONST:val {: RESULT = new ExprNode("BOOL_CONST", new LeafBool(val)); :}
	| INTEGER_CONST:val {: RESULT = new ExprNode("INTEGER_CONST", new LeafIntegerConst(val)); :}
	| REAL_CONST:val {: RESULT = new ExprNode("REAL_CONST", new LeafRealConst(val)); :}
	| STRING_CONST:val {: RESULT = new ExprNode("STRING_CONST", new LeafStringConst(val)); :}
	| ID:val {: RESULT = new ExprNode("ID", new LeafID(val)); :}
	| CallFun:val {: RESULT = new ExprNode("CallFunOp", (CallFunNode) val); :}
	| Expr:e1  PLUS Expr:e2 {: RESULT = new ExprNode("AddOp", (ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  MINUS Expr:e2 {: RESULT = new ExprNode("DiffOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1 TIMES Expr:e2 {: RESULT = new ExprNode("MulOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  DIV Expr:e2 {: RESULT = new ExprNode("DivOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  DIVINT Expr:e2 {: RESULT = new ExprNode("DivIntOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  AND Expr:e2 {: RESULT = new ExprNode("AndOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1 POW Expr:e2 {: RESULT = new ExprNode("PowOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1 STR_CONCAT Expr:e2 {: RESULT = new ExprNode("StrCatOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  OR Expr:e2 {: RESULT = new ExprNode("OrOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  GT Expr:e2 {: RESULT = new ExprNode("GTOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1 GE Expr:e2 {: RESULT = new ExprNode("GEOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  LT Expr:e2 {: RESULT = new ExprNode("LTOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  LE Expr:e2 {: RESULT = new ExprNode("LEOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  EQ Expr:e2 {: RESULT = new ExprNode("EQOp",(ExprNode) e1,(ExprNode) e2); :}
	| Expr:e1  NE Expr:e2 {: RESULT = new ExprNode("NEOp",(ExprNode) e1,(ExprNode) e2); :}
	| MINUS Expr:e1 {: RESULT = new ExprNode("UminusOp",(ExprNode) e1); :} %prec _uminus
	| NOT Expr:e1 {: RESULT = new ExprNode("NotOp",(ExprNode) e1); :}
	| LPAR Expr:e1 RPAR {: RESULT = new ExprNode("ExprOp",(ExprNode) e1); :}
;

